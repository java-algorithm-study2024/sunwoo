import java.util.ArrayDeque;
import java.util.Queue;

class Solution {
    static boolean[][] visit;
    Queue<int[]> que = new ArrayDeque<>();
    static int[] dx = {0 , -1 , 0, 1};
    static int[] dy = {1 , 0 , -1 , 0};
    static int[] target = new int[2];
    static int[][] static_maps;

    public int bfs(int x, int y){
        int count = 1; // 시작 지점도 경로에 포함되므로 1로 시작
        visit[x][y] = true;
        que.add(new int[]{x, y});
        que.add(new int[]{-1, -1}); // 레벨 구분을 위한 마커

        while(!que.isEmpty()){
            int[] current = que.poll();
            int cx = current[0];
            int cy = current[1];

            if(cx == -1 && cy == -1){
                if(!que.isEmpty()){
                    count++;
                    que.add(new int[]{-1, -1});
                }
                continue;
            }

            for(int i = 0; i < 4; i++){
                int nx = cx + dx[i];
                int ny = cy + dy[i];

                if(nx >= 0 && ny >= 0 && nx < target[0] && ny < target[1]){
                    if(!visit[nx][ny] && static_maps[nx][ny] == 1){
                        if(nx == target[0] - 1 && ny == target[1] - 1){
                            return count + 1;
                        }
                        visit[nx][ny] = true;
                        que.add(new int[]{nx, ny});
                    }
                }
            }
        }

        return -1; // 경로를 찾지 못한 경우
    }

    public int solution(int[][] maps) {
        target[0] = maps.length;
        target[1] = maps[0].length;
        visit = new boolean[target[0]][target[1]];
        static_maps = maps;
        return bfs(0, 0);
    }
}
